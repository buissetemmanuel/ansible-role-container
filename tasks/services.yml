---

- name: "{{ container_mode }} | services | pod"
  ansible.builtin.set_fact:
    __container_service_name: "{{ container_pod_name }}"

- name: "{{ container_mode }} | services | pod | check service file exist"
  when: not ansible_check_mode
  become: true
  become_user: "{{ container_user_owner_service }}"
  become_method: community.general.machinectl
  become_exe: "sudo machinectl"
  ansible.builtin.stat:
    path: "{{ container_pod_service_dir }}/{{ container_pod_name }}.service"
  register: __service

- name: "{{ container_mode }} | services | pod | ensure service is (started and enabled) or (stop it and disable it)"
  when:
    - not ansible_check_mode
    - __service.stat.exists
  become: true
  become_user: "{{ container_user_owner_service }}"
  become_method: community.general.machinectl
  become_exe: "sudo machinectl"
  ansible.builtin.systemd:
    name: "{{ __container_service_name }}"
    state: "{{ 'started' if container_state == 'present' else 'stopped' }}"
    enabled: "{{ 'true' if container_state == 'present' else 'false' }}"
    daemon_reload: "{{ 'true' if container_state == 'present' else 'false' }}"
    scope: user
  register: __container_service_name_status
  until: ( __container_service_name_status.status is defined and __container_service_name_status.status.ActiveState == "active" ) or container_state == 'absent'
  retries: 15
  delay: 10

- name: "{{ container_mode }} | services | podman system reset --force"
  when: container_state == 'absent'
  become: true
  become_user: "{{ container_user_owner_service }}"
  become_method: community.general.machinectl
  become_exe: "sudo machinectl"
  ansible.builtin.command: "podman system reset --force"
  register: __podman_system_reset
  changed_when: __podman_system_reset.rc != 0
